plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id "io.freefair.lombok" version "8.6"
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url 'https://maven.wispforest.io' }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    maven {
        name = "Ladysnake Mods"
        url = 'https://maven.ladysnake.org/releases'
    }
    maven {
        name "KosmX's maven"
        url 'https://maven.kosmx.dev/'
    }
    maven { url 'https://jitpack.io' }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven { url = 'https://maven.minecraftforge.net/' }
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

    // TODO: include -> mod requirements for all libs
    modImplementation("io.wispforest:owo-lib:${project.owo_version}")
    include "io.wispforest:owo-sentinel:${project.owo_version}"
    include modImplementation("software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${gecko_version}")
    include modImplementation("org.ladysnake.cardinal-components-api:cardinal-components-base:${project.cca_version}")
    include modImplementation("org.ladysnake.cardinal-components-api:cardinal-components-entity:${project.cca_version}")
    include modImplementation("org.ladysnake.cardinal-components-api:cardinal-components-chunk:${project.cca_version}")
    include modImplementation("org.ladysnake.cardinal-components-api:cardinal-components-item:${project.cca_version}")

    // TODO: consider fixing MidnightLib dependency
    include modImplementation("maven.modrinth:midnightlib:${project.midnightlib_version}")
    // TODO: replace with original after update
    include modImplementation("com.github.feytox:Fabric-Shield-Lib:1.21-without-enchantments-SNAPSHOT")
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config}")
    modCompileOnly modRuntimeOnly ("com.terraformersmc:modmenu:${project.mod_menu}"), {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation("com.github.Chocohead:Fabric-ASM:${project.fabric_asm}") {
        exclude (group: "net.fabricmc.fabric-api")
    }
    include("com.github.Chocohead:Fabric-ASM:${project.fabric_asm}")
    include modImplementation("dev.emi:trinkets:${project.trinkets_version}")
    include modImplementation("com.terraformersmc:biolith-fabric:${project.biolith_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
    repositories {
    }
}

loom {
    accessWidenerPath = file("src/main/resources/etherology.accesswidener")
}

loom {
    runs {
        //
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
        //
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${project.modid}"

            runDir "build/datagen"
        }
    }
}

//
// Adds the generated files into the jar you distribute to players.
//
sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}